{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\nimport { Radio, ScrollView, Text, useToast, VStack } from \"native-base\";\nimport { useState } from \"react\";\nimport { Button } from \"../components/Button\";\nimport { api } from \"../services/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function Form() {\n  var route = useRoute();\n  var toast = useToast();\n  var navigation = useNavigation();\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    choice = _useState2[0],\n    setChoice = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    answers = _useState4[0],\n    setAnswers = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    currentPage = _useState6[0],\n    setCurrentPage = _useState6[1];\n  var _ref = route.params,\n    sidewalkId = _ref.sidewalkId,\n    sidewalkName = _ref.sidewalkName,\n    questions = _ref.questions;\n  function handleSubmitForm() {\n    return _regeneratorRuntime.async(function handleSubmitForm$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            answers.push({\n              questionId: questions[currentPage].id,\n              value: parseInt(choice)\n            });\n            if (!(currentPage == 4)) {\n              _context.next = 10;\n              break;\n            }\n            console.log(answers);\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(api.post(\"/sidewalks/\" + sidewalkId + \"/answers\", answers));\n          case 6:\n            toast.show({\n              title: 'Respostas salvas',\n              placement: 'top',\n              bgColor: 'green.500'\n            });\n            navigation.navigate('Details', {\n              sidewalkId: sidewalkId,\n              sidewalkName: sidewalkName\n            });\n            _context.next = 12;\n            break;\n          case 10:\n            setChoice(\"\");\n            setCurrentPage(currentPage + 1);\n          case 12:\n            _context.next = 18;\n            break;\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            toast.show({\n              title: 'Não foi possível salvar a resposta da questão',\n              placement: 'top',\n              bgColor: 'red.500'\n            });\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 14]], Promise);\n  }\n  return _jsxs(VStack, {\n    flex: 1,\n    px: 4,\n    pt: 12,\n    bg: \"#D2D2D2\",\n    rounded: \"2xl\",\n    space: 4,\n    w: \"full\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    children: [_jsx(Text, {\n      fontSize: \"3xl\",\n      mb: 2,\n      children: sidewalkName\n    }), _jsx(ScrollView, {\n      ml: -2,\n      w: \"full\",\n      children: _jsx(Radio.Group, {\n        mb: 4,\n        name: \"questao\",\n        alignItems: \"center\",\n        justifyItems: \"center\",\n        value: choice,\n        onChange: function onChange(value) {\n          setChoice(value);\n        },\n        children: questions[currentPage].choices.map(function (choice, key) {\n          return _jsx(Radio, {\n            value: choice.value,\n            children: _jsx(Text, {\n              w: \"80\",\n              mb: 3,\n              pb: 1,\n              borderBottomWidth: 1,\n              children: choice.text\n            })\n          }, key);\n        })\n      })\n    }), _jsx(Button, {\n      bg: \"black\",\n      title: currentPage == 4 ? \"Finalizar\" : \"Próximo\",\n      headingColor: \"white\",\n      w: \"full\",\n      mb: 2,\n      onPress: handleSubmitForm\n    })]\n  });\n}","map":{"version":3,"names":["useNavigation","useRoute","Radio","ScrollView","Text","useToast","VStack","useState","Button","api","Form","route","toast","navigation","choice","setChoice","answers","setAnswers","currentPage","setCurrentPage","params","sidewalkId","sidewalkName","questions","handleSubmitForm","push","questionId","id","value","parseInt","console","log","post","show","title","placement","bgColor","navigate","choices","map","key","text"],"sources":["/home/pedro/Documentos/IFMS/projetos/ape-safari-urbano/mobile/src/screens/Form.tsx"],"sourcesContent":["import { useNavigation, useRoute } from \"@react-navigation/native\";\nimport { Checkbox, FlatList, HStack, Radio, ScrollView, Text, useToast, VStack } from \"native-base\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nimport { Button } from \"../components/Button\";\nimport { Loading } from \"../components/Loading\";\nimport { QuestionCard } from \"../components/QuestionCard\";\n\nimport { api } from \"../services/api\";\n\nimport { QuestionProps } from \"./Details\";\n\ninterface RouteParams {\n    sidewalkId: string\n    sidewalkName: string\n    questions: QuestionProps[]\n}\n\ninterface AnswerProps {\n    questionId: string\n    value: number\n}\n\nexport function Form() {\n    const route = useRoute()\n    const toast = useToast()\n    const navigation = useNavigation()\n    \n    const [choice, setChoice] = useState(\"\")\n    const [answers, setAnswers] = useState<AnswerProps[]>([])\n    const [currentPage, setCurrentPage] = useState(0)\n\n    const { sidewalkId, sidewalkName, questions } = route.params as RouteParams\n\n    async function handleSubmitForm() {\n\n        try {\n            answers.push({\n                questionId: questions[currentPage].id,\n                value: parseInt(choice)\n            })\n\n            if (currentPage == 4) {\n                console.log(answers)\n                await api.post(`/sidewalks/${sidewalkId}/answers`, answers)\n\n                toast.show({\n                    title: 'Respostas salvas',\n                    placement: 'top',\n                    bgColor: 'green.500'\n                })\n\n                navigation.navigate('Details', {sidewalkId, sidewalkName})\n            }\n            else {\n                setChoice(\"\")\n                setCurrentPage(currentPage + 1)\n            }\n            \n        } catch (error) {\n            console.log(error)\n\n            toast.show({\n                title: 'Não foi possível salvar a resposta da questão',\n                placement: 'top',\n                bgColor: 'red.500'\n            })\n        }\n    }\n\n    return (\n        <VStack \n            flex={1}\n            px={4}\n            pt={12}\n            bg=\"#D2D2D2\"\n            rounded=\"2xl\"\n            space={4}\n            w=\"full\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n        >\n\n            \n\n                <Text fontSize=\"3xl\" mb={2}>\n                    {sidewalkName}\n                </Text>\n\n                \n                <ScrollView ml={-2} w=\"full\">\n                    <Radio.Group\n                        mb={4}\n                        name=\"questao\"\n                        alignItems=\"center\"\n                        justifyItems=\"center\"\n                        value={choice}\n                        onChange={value => {\n                            setChoice(value);\n                        }}\n                    >\n                        {\n                            questions[currentPage].choices.map((choice, key) => {\n                                return (\n                                    <Radio\n                                        key={key}\n                                        value={choice.value}\n                                    >\n                                        <Text\n                                            w=\"80\"\n                                            mb={3}\n                                            pb={1}\n                                            borderBottomWidth={1}\n                                        >\n                                            {choice.text}\n                                        </Text>\n                                    </Radio>\n                                )\n                            })\n                        }\n                    </Radio.Group>\n                </ScrollView>\n\n                <Button \n                    bg=\"black\"\n                    title={currentPage == 4 ? \"Finalizar\" : \"Próximo\"}\n                    headingColor=\"white\"\n                    w=\"full\"\n                    mb={2}\n                    onPress={handleSubmitForm}\n                />\n            \n        </VStack>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}