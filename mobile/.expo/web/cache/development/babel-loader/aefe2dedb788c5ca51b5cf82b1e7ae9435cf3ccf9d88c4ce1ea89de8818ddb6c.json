{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useFocusEffect, useNavigation } from \"@react-navigation/native\";\nimport { FlatList, Heading, useToast, VStack } from \"native-base\";\nimport { useCallback, useState } from \"react\";\nimport { Button } from \"../components/Button\";\nimport { EmptySidewalkList } from \"../components/EmptySidewalkList\";\nimport { Input } from \"../components/Input\";\nimport { Loading } from \"../components/Loading\";\nimport { SidewalkCard } from \"../components/SidewalkCard\";\nimport { api } from \"../services/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function Sidewalk() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    sidewalks = _useState4[0],\n    setSidewalks = _useState4[1];\n  var _useState5 = useState(\"\"),\n    _useState6 = _slicedToArray(_useState5, 2),\n    sidewalkName = _useState6[0],\n    setSidewalkName = _useState6[1];\n  var toast = useToast();\n  var navigation = useNavigation();\n  function handleSidewalkNameSubmit() {\n    var response;\n    return _regeneratorRuntime.async(function handleSidewalkNameSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setIsLoading(true);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(api.post('/sidewalks', {\n              name: sidewalkName,\n              start: \"\",\n              end: \"\"\n            }));\n          case 4:\n            response = _context.sent;\n            toast.show({\n              title: 'Segmento de calçada criado com sucesso!',\n              placement: 'top',\n              bgColor: 'green.500'\n            });\n            setSidewalkName(\"\");\n            fetchSidewalks();\n            _context.next = 14;\n            break;\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            toast.show({\n              title: 'Não foi possível cadastrar o segmento de calçada',\n              placement: 'top',\n              bgColor: 'red.500'\n            });\n          case 14:\n            _context.prev = 14;\n            setIsLoading(false);\n            return _context.finish(14);\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10, 14, 17]], Promise);\n  }\n  function fetchSidewalks() {\n    var response;\n    return _regeneratorRuntime.async(function fetchSidewalks$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            setIsLoading(true);\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(api.get('/sidewalks'));\n          case 4:\n            response = _context2.sent;\n            setSidewalks(response.data.sidewalks);\n            _context2.next = 12;\n            break;\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n            toast.show({\n              title: 'Não foi possível carregar os segmentos de calçada',\n              placement: 'top',\n              bgColor: 'red.500'\n            });\n          case 12:\n            _context2.prev = 12;\n            setIsLoading(false);\n            return _context2.finish(12);\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8, 12, 15]], Promise);\n  }\n  useFocusEffect(useCallback(function () {\n    fetchSidewalks();\n  }, []));\n  return _jsxs(VStack, {\n    flex: 1,\n    px: 8,\n    pt: 10,\n    children: [_jsx(Heading, {\n      color: \"black\",\n      fontSize: \"xl\",\n      mt: 10,\n      mb: 6,\n      children: \"Cadastro de segmento de cal\\xE7ada\"\n    }), _jsx(Input, {\n      placeholder: \"Nome do segmento de cal\\xE7ada\",\n      mb: 2,\n      onChangeText: setSidewalkName,\n      value: sidewalkName\n    }), _jsx(Button, {\n      bg: \"black\",\n      title: \"Adicionar segmento\",\n      headingColor: \"white\",\n      w: \"full\",\n      mb: 4,\n      onPress: handleSidewalkNameSubmit\n    }), isLoading ? _jsx(Loading, {}) : _jsx(FlatList, {\n      data: sidewalks,\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      },\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(SidewalkCard, {\n          data: item,\n          onPress: function onPress() {\n            return navigation.navigate('Details', {\n              sidewalkId: item.id,\n              sidewalkName: item.name\n            });\n          }\n        });\n      },\n      showsVerticalScrollIndicator: false,\n      _contentContainerStyle: {\n        pb: 10\n      },\n      ListEmptyComponent: function ListEmptyComponent() {\n        return _jsx(EmptySidewalkList, {});\n      }\n    })]\n  });\n}","map":{"version":3,"names":["useFocusEffect","useNavigation","FlatList","Heading","useToast","VStack","useCallback","useState","Button","EmptySidewalkList","Input","Loading","SidewalkCard","api","Sidewalk","isLoading","setIsLoading","sidewalks","setSidewalks","sidewalkName","setSidewalkName","toast","navigation","handleSidewalkNameSubmit","post","name","start","end","response","show","title","placement","bgColor","fetchSidewalks","console","log","get","data","item","id","navigate","sidewalkId","pb"],"sources":["/home/pedro/Documentos/IFMS/projetos/ape-safari-urbano/mobile/src/screens/Sidewalk.tsx"],"sourcesContent":["import { useFocusEffect, useNavigation } from \"@react-navigation/native\";\nimport { FlatList, Heading, useToast, VStack } from \"native-base\";\nimport { useCallback, useState } from \"react\";\n\nimport { Button } from \"../components/Button\";\nimport { EmptySidewalkList } from \"../components/EmptySidewalkList\";\nimport { Input } from \"../components/Input\";\nimport { Loading } from \"../components/Loading\";\nimport { SidewalkCard, SidewalkCardProps } from \"../components/SidewalkCard\";\n\nimport { api } from \"../services/api\";\n\n\nexport function Sidewalk() {\n\n    const [isLoading, setIsLoading] = useState(true)\n    const [sidewalks, setSidewalks]= useState<SidewalkCardProps[]>([])\n    const [sidewalkName, setSidewalkName] = useState(\"\")\n\n    const toast = useToast()\n\n    const navigation = useNavigation()\n\n    async function handleSidewalkNameSubmit() {\n        try {\n            setIsLoading(true)\n            const response = await api.post('/sidewalks', {\n                name: sidewalkName,\n                start: \"\",\n                end: \"\"\n            })\n\n            toast.show({\n                title: 'Segmento de calçada criado com sucesso!',\n                placement: 'top',\n                bgColor: 'green.500'\n            })\n            \n            setSidewalkName(\"\")\n            fetchSidewalks()\n        } catch (error) {\n            console.log(error)\n\n            toast.show({\n                title: 'Não foi possível cadastrar o segmento de calçada',\n                placement: 'top',\n                bgColor: 'red.500'\n            })\n        } finally {\n            setIsLoading(false)\n        }\n    }\n\n    async function fetchSidewalks() {\n        try {\n            setIsLoading(true)\n            const response = await api.get('/sidewalks')\n            setSidewalks(response.data.sidewalks)\n\n        } catch (error) {\n            console.log(error)\n\n            toast.show({\n                title: 'Não foi possível carregar os segmentos de calçada',\n                placement: 'top',\n                bgColor: 'red.500'\n            })\n        } finally {\n            setIsLoading(false)\n        }\n    }\n\n    useFocusEffect(useCallback(() => {\n        fetchSidewalks()\n    }, []))\n\n    return (\n        <VStack flex={1} px={8} pt={10}>\n\n            <Heading color=\"black\" fontSize=\"xl\" mt={10} mb={6}>\n                Cadastro de segmento de calçada\n            </Heading>\n\n            <Input \n                placeholder=\"Nome do segmento de calçada\"\n                mb={2}\n                onChangeText={setSidewalkName}\n                value={sidewalkName}\n            />\n\n            <Button \n                bg=\"black\"\n                title=\"Adicionar segmento\"\n                headingColor=\"white\"\n                w=\"full\"\n                mb={4}\n                onPress={handleSidewalkNameSubmit}\n            />\n\n            {\n                isLoading ? <Loading /> :\n                <FlatList \n                    data={sidewalks}\n                    keyExtractor={item => item.id}\n                    renderItem={({ item }) => (\n                        <SidewalkCard\n                            data={item}\n                            onPress={() => navigation.navigate('Details', {\n                                sidewalkId: item.id,\n                                sidewalkName: item.name\n                            })}\n                        />\n                    )}\n                    showsVerticalScrollIndicator={false}\n                    _contentContainerStyle={{ pb: 10 }}\n                    ListEmptyComponent={() => <EmptySidewalkList />}\n                />\n            }            \n\n        </VStack>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}